#!/bin/sh

echo "${INDENT}Loading ~/.shellrc"

alias la='ls -la'
alias ..='cd ..'
alias ...='cd ...'

# sql shortcuts
alias sqls="select * from "

alias mk=make
alias pf=printf

# network info
alias ss-='ss -aut' # optional -e or -p for extended or program using socket info; `netstat` is no longer common
alias ip-='ip addr show' # all network adapters, `ifconfig` is deprecated
alias ip-ext='wget http://ipinfo.io/ip -qO -' # ping website to get public facing ip outside lan
alias ngrep-='ngrep -d any -W byline 'HTTP/1.1' port 80' # monitor all http traffic on port 80, print pretty headers. if nothing is set up to recieve, no appreciable output except ###

# process info
alias psg="ps aux | grep"

alias fg1="fg %1"
alias fg2="fg %2"
alias fg3="fg %3"

# disk info
alias disk-usage='df'
alias directory-size='du -sh'

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

ip() {
  echo -e "WiFi:\t\t `ipconfig getifaddr en0 2> /dev/null`"
  echo -e "Ethernet:\t `ipconfig getifaddr en1 2> /dev/null`"
  echo -e "External:\t `curl -s http://checkip.dyndns.org/ | grep -o '[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*.[0-9]*'`"
}

extract() {
      if [ -f $1 ] ; then
              case $1 in
                      *.tar.bz2)      tar xjf $1              ;;
                      *.tar.gz)       tar xzf $1              ;;
                      *.bz2)          bunzip2 $1              ;;
                      *.rar)          rar x $1                ;;
                      *.gz)           gunzip $1               ;;
                      *.tar)          tar xf $1               ;;
                      *.tbz2)         tar xjf $1              ;;
                      *.tgz)          tar xzf $1              ;;
                      *.zip)          unzip $1                ;;
                      *.Z)            uncompress $1   ;;
                      *)              echo "'$1' cannot be extracted via extract()" ;;
              esac
      else
              echo "'$1' is not a valid file"
      fi
}

# taken from https://superuser.com/questions/141044/sharing-the-same-ssh-agent-among-multiple-login-sessions

function sshagent_findsockets {
    find /tmp -uid $(id -u) -type s -name agent.\* 2>/dev/null
}

function sshagent_testsocket {
    if [ ! -x "$(which ssh-add)" ] ; then
        echo "ssh-add is not available; agent testing aborted"
        return 1
    fi

    if [ X"$1" != X ] ; then
        export SSH_AUTH_SOCK=$1
    fi

    if [ X"$SSH_AUTH_SOCK" = X ] ; then
        return 2
    fi

    if [ -S $SSH_AUTH_SOCK ] ; then
        ssh-add -l > /dev/null
        if [ $? = 2 ] ; then
            echo "Socket $SSH_AUTH_SOCK is dead!  Deleting!"
            rm -f $SSH_AUTH_SOCK
            return 4
        else
            echo "Found ssh-agent $SSH_AUTH_SOCK"
            return 0
        fi
    else
        echo "$SSH_AUTH_SOCK is not a socket!"
        return 3
    fi
}

function sshagent_init {
    # ssh agent sockets can be attached to a ssh daemon process or an
    # ssh-agent process.

    AGENTFOUND=0

    # Attempt to find and use the ssh-agent in the current environment
    if sshagent_testsocket ; then AGENTFOUND=1 ; fi

    # If there is no agent in the environment, search /tmp for
    # possible agents to reuse before starting a fresh ssh-agent
    # process.
    if [ $AGENTFOUND = 0 ] ; then
        for agentsocket in $(sshagent_findsockets) ; do
            if [ $AGENTFOUND != 0 ] ; then break ; fi
            if sshagent_testsocket $agentsocket ; then AGENTFOUND=1 ; fi
        done
    fi

    # If at this point we still haven't located an agent, it's time to
    # start a new one
    if [ $AGENTFOUND = 0 ] ; then
        eval `ssh-agent`
    fi

    # Clean up
    unset AGENTFOUND
    unset agentsocket

    # Finally, show what keys are currently in the agent
    ssh-add -l
}

function sshadd_all {
    # TODO don't try to re-add keys that have already been added.  you have to retype the password
    printf "adding ssh keys...\n"
    ls ~/.ssh/id_rsa* | grep -v '"'"'\.pub$'"'"' | xargs ssh-add 2> /dev/null
    ls ~/.ssh/shared_keys/id_rsa* | grep -v '"'"'\.pub$'"'"' | xargs ssh-add 2> /dev/null
}

sshagent_init > /dev/null


for f in ${HOME}/.shellrc.d/*; do source $f; done
